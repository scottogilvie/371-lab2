|fourFuncCalc_stated
ledr[0] <= displayReg[0].DB_MAX_OUTPUT_PORT_TYPE
ledr[1] <= displayReg[1].DB_MAX_OUTPUT_PORT_TYPE
ledr[2] <= displayReg[2].DB_MAX_OUTPUT_PORT_TYPE
ledr[3] <= displayReg[3].DB_MAX_OUTPUT_PORT_TYPE
ledr[4] <= displayReg[4].DB_MAX_OUTPUT_PORT_TYPE
ledr[5] <= displayReg[5].DB_MAX_OUTPUT_PORT_TYPE
ledr[6] <= displayReg[6].DB_MAX_OUTPUT_PORT_TYPE
ledr[7] <= displayReg[7].DB_MAX_OUTPUT_PORT_TYPE
ledr[8] <= <GND>
ledr[9] <= <GND>
hex0[0] <= <GND>
hex0[1] <= <GND>
hex0[2] <= <GND>
hex0[3] <= <GND>
hex0[4] <= <GND>
hex0[5] <= <GND>
hex0[6] <= <GND>
hex1[0] <= <GND>
hex1[1] <= <GND>
hex1[2] <= <GND>
hex1[3] <= <GND>
hex1[4] <= <GND>
hex1[5] <= <GND>
hex1[6] <= <GND>
hex2[0] <= <GND>
hex2[1] <= <GND>
hex2[2] <= <GND>
hex2[3] <= <GND>
hex2[4] <= <GND>
hex2[5] <= <GND>
hex2[6] <= <GND>
hex3[0] <= <GND>
hex3[1] <= <GND>
hex3[2] <= <GND>
hex3[3] <= <GND>
hex3[4] <= <GND>
hex3[5] <= <GND>
hex3[6] <= <GND>
hex4[0] <= <GND>
hex4[1] <= <GND>
hex4[2] <= <GND>
hex4[3] <= <GND>
hex4[4] <= <GND>
hex4[5] <= <GND>
hex4[6] <= <GND>
hex5[0] <= <GND>
hex5[1] <= <GND>
hex5[2] <= <GND>
hex5[3] <= <GND>
hex5[4] <= <GND>
hex5[5] <= <GND>
hex5[6] <= <GND>
clk => displayIndex[0].CLK
clk => displayIndex[1].CLK
clk => displayIndex[2].CLK
clk => displayIndex[3].CLK
clk => displayIndex[4].CLK
clk => displayIndex[5].CLK
clk => remainderReg[0].CLK
clk => remainderReg[1].CLK
clk => remainderReg[2].CLK
clk => remainderReg[3].CLK
clk => resultReg[0].CLK
clk => resultReg[1].CLK
clk => resultReg[2].CLK
clk => resultReg[3].CLK
clk => resultReg[4].CLK
clk => resultReg[5].CLK
clk => resultReg[6].CLK
clk => resultReg[7].CLK
clk => computeReg2[0].CLK
clk => computeReg2[1].CLK
clk => computeReg2[2].CLK
clk => computeReg2[3].CLK
clk => computeReg2[4].CLK
clk => computeReg2[5].CLK
clk => computeReg2[6].CLK
clk => computeReg2[7].CLK
clk => computeReg1[0].CLK
clk => computeReg1[1].CLK
clk => computeReg1[2].CLK
clk => computeReg1[3].CLK
clk => computeReg1[4].CLK
clk => computeReg1[5].CLK
clk => computeReg1[6].CLK
clk => computeReg1[7].CLK
clk => computeIndex[0].CLK
clk => computeIndex[1].CLK
clk => computeIndex[2].CLK
clk => computeIndex[3].CLK
clk => computeIndex[4].CLK
clk => computeIndex[5].CLK
clk => computeIndex[6].CLK
clk => sramlData[0].CLK
clk => sramlData[1].CLK
clk => sramlData[2].CLK
clk => sramlData[3].CLK
clk => sramlData[4].CLK
clk => sramlData[5].CLK
clk => sramlData[6].CLK
clk => sramlData[7].CLK
clk => sramAddress[0].CLK
clk => sramAddress[1].CLK
clk => sramAddress[2].CLK
clk => sramAddress[3].CLK
clk => sramAddress[4].CLK
clk => sramAddress[5].CLK
clk => sramAddress[6].CLK
clk => sramAddress[7].CLK
clk => sramNWe.CLK
clk => sramNOe.CLK
clk => sramNCs.CLK
clk => startIndex[0].CLK
clk => startIndex[1].CLK
clk => startIndex[2].CLK
clk => startIndex[3].CLK
clk => startIndex[4].CLK
clk => startIndex[5].CLK
clk => startIndex[6].CLK
clk => displayReg[0].CLK
clk => displayReg[1].CLK
clk => displayReg[2].CLK
clk => displayReg[3].CLK
clk => displayReg[4].CLK
clk => displayReg[5].CLK
clk => displayReg[6].CLK
clk => displayReg[7].CLK
clk => nextState.DISPLAY_READ.CLK
clk => nextState.DISPLAY.CLK
clk => nextState.COMPUTE_DONE.CLK
clk => nextState.COMPUTE_STROBEHI.CLK
clk => nextState.COMPUTE_STROBELO.CLK
clk => nextState.COMPUTE_WRITE.CLK
clk => nextState.COMPUTE_RESULT_LOAD.CLK
clk => nextState.COMPUTE_RESULT.CLK
clk => nextState.COMPUTE_LOAD2_READ.CLK
clk => nextState.COMPUTE_LOAD2.CLK
clk => nextState.COMPUTE_LOAD1_READ.CLK
clk => nextState.COMPUTE_LOAD1.CLK
clk => nextState.COMPUTE_RUN.CLK
clk => nextState.START_DONE.CLK
clk => nextState.START_STROBEHI.CLK
clk => nextState.START_STROBELO.CLK
clk => nextState.START_RUN.CLK
clk => nextState.IDLE.CLK
sw[0] => Decoder0.IN1
sw[1] => Decoder0.IN0
sw[2] => Mux0.IN5
sw[2] => Mux1.IN5
sw[2] => Mux2.IN5
sw[2] => Mux3.IN5
sw[2] => Mux4.IN5
sw[2] => Mux5.IN5
sw[2] => Mux6.IN5
sw[2] => Mux7.IN5
sw[2] => Decoder1.IN1
sw[3] => Mux0.IN4
sw[3] => Mux1.IN4
sw[3] => Mux2.IN4
sw[3] => Mux3.IN4
sw[3] => Mux4.IN4
sw[3] => Mux5.IN4
sw[3] => Mux6.IN4
sw[3] => Mux7.IN4
sw[3] => Decoder1.IN0
sw[4] => ~NO_FANOUT~
sw[5] => ~NO_FANOUT~
sw[6] => ~NO_FANOUT~
sw[7] => ~NO_FANOUT~
sw[8] => ~NO_FANOUT~
sw[9] => ~NO_FANOUT~
key[0] => sramAddress[0].OUTPUTSELECT
key[0] => sramAddress[1].OUTPUTSELECT
key[0] => sramAddress[2].OUTPUTSELECT
key[0] => sramAddress[3].OUTPUTSELECT
key[0] => sramAddress[4].OUTPUTSELECT
key[0] => sramAddress[5].OUTPUTSELECT
key[0] => sramAddress[6].OUTPUTSELECT
key[0] => sramAddress[7].OUTPUTSELECT
key[0] => sramNWe.OUTPUTSELECT
key[0] => sramNOe.OUTPUTSELECT
key[0] => sramNCs.OUTPUTSELECT
key[0] => nextState.DISPLAY_READ.ACLR
key[0] => nextState.DISPLAY.ALOAD
key[0] => nextState.COMPUTE_DONE.ACLR
key[0] => nextState.COMPUTE_STROBEHI.ACLR
key[0] => nextState.COMPUTE_STROBELO.ACLR
key[0] => nextState.COMPUTE_WRITE.ACLR
key[0] => nextState.COMPUTE_RESULT_LOAD.ACLR
key[0] => nextState.COMPUTE_RESULT.ACLR
key[0] => nextState.COMPUTE_LOAD2_READ.ACLR
key[0] => nextState.COMPUTE_LOAD2.ACLR
key[0] => nextState.COMPUTE_LOAD1_READ.ACLR
key[0] => nextState.COMPUTE_LOAD1.ACLR
key[0] => nextState.COMPUTE_RUN.ALOAD
key[0] => nextState.START_DONE.ACLR
key[0] => nextState.START_STROBEHI.ACLR
key[0] => nextState.START_STROBELO.ACLR
key[0] => nextState.START_RUN.ALOAD
key[0] => nextState.IDLE.ALOAD
key[0] => displayReg[7].ENA
key[0] => displayReg[6].ENA
key[0] => displayReg[5].ENA
key[0] => displayReg[4].ENA
key[0] => displayReg[3].ENA
key[0] => displayReg[2].ENA
key[0] => displayReg[1].ENA
key[0] => displayReg[0].ENA
key[0] => startIndex[6].ENA
key[0] => startIndex[5].ENA
key[0] => startIndex[4].ENA
key[0] => startIndex[3].ENA
key[0] => startIndex[2].ENA
key[0] => startIndex[1].ENA
key[0] => startIndex[0].ENA
key[0] => sramlData[7].ENA
key[0] => sramlData[6].ENA
key[0] => sramlData[5].ENA
key[0] => sramlData[4].ENA
key[0] => sramlData[3].ENA
key[0] => sramlData[2].ENA
key[0] => sramlData[1].ENA
key[0] => sramlData[0].ENA
key[0] => computeIndex[6].ENA
key[0] => computeIndex[5].ENA
key[0] => computeIndex[4].ENA
key[0] => computeIndex[3].ENA
key[0] => computeIndex[2].ENA
key[0] => computeIndex[1].ENA
key[0] => computeIndex[0].ENA
key[0] => computeReg1[7].ENA
key[0] => computeReg1[6].ENA
key[0] => computeReg1[5].ENA
key[0] => computeReg1[4].ENA
key[0] => computeReg1[3].ENA
key[0] => computeReg1[2].ENA
key[0] => computeReg1[1].ENA
key[0] => computeReg1[0].ENA
key[0] => computeReg2[7].ENA
key[0] => computeReg2[6].ENA
key[0] => computeReg2[5].ENA
key[0] => computeReg2[4].ENA
key[0] => computeReg2[3].ENA
key[0] => computeReg2[2].ENA
key[0] => computeReg2[1].ENA
key[0] => computeReg2[0].ENA
key[0] => resultReg[7].ENA
key[0] => resultReg[6].ENA
key[0] => resultReg[5].ENA
key[0] => resultReg[4].ENA
key[0] => resultReg[3].ENA
key[0] => resultReg[2].ENA
key[0] => resultReg[1].ENA
key[0] => displayIndex[0].ENA
key[0] => resultReg[0].ENA
key[0] => remainderReg[3].ENA
key[0] => remainderReg[2].ENA
key[0] => remainderReg[1].ENA
key[0] => remainderReg[0].ENA
key[0] => displayIndex[5].ENA
key[0] => displayIndex[4].ENA
key[0] => displayIndex[3].ENA
key[0] => displayIndex[2].ENA
key[0] => displayIndex[1].ENA
key[1] => ~NO_FANOUT~
key[2] => ~NO_FANOUT~
key[3] => ~NO_FANOUT~
rst => ~NO_FANOUT~


|fourFuncCalc_stated|sram256x8:sram
data[0] <> data[0]
data[1] <> data[1]
data[2] <> data[2]
data[3] <> data[3]
data[4] <> data[4]
data[5] <> data[5]
data[6] <> data[6]
data[7] <> data[7]
add[0] => mem.WADDR
add[0] => mem.RADDR
add[1] => mem.WADDR1
add[1] => mem.RADDR1
add[2] => mem.WADDR2
add[2] => mem.RADDR2
add[3] => mem.WADDR3
add[3] => mem.RADDR3
add[4] => mem.WADDR4
add[4] => mem.RADDR4
add[5] => mem.WADDR5
add[5] => mem.RADDR5
add[6] => mem.WADDR6
add[6] => mem.RADDR6
add[7] => mem.WADDR7
add[7] => mem.RADDR7
nCs => data.IN0
nOe => data.IN1
nWe => ~NO_FANOUT~


